/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/9/2017
Description:	Creates the role table and respective stored procedures

*/


USE cory2v;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `cory2v`.`role`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_role_Load`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_role_LoadAll`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_role_Add`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_role_Update`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_role_Delete`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_role_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `cory2v`.`role` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_role_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_role_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`role`.`Id` AS `Id`,
		`role`.`Name` AS `Name`,
		`role`.`Description` AS `Description`
	FROM `role`
	WHERE 		`role`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_role_LoadAll`
()
BEGIN
	SELECT
		`role`.`Id` AS `Id`,
		`role`.`Name` AS `Name`,
		`role`.`Description` AS `Description`
	FROM `role`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_role_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `role` (Name,Description)
	VALUES (paramName, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_role_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `role`
	SET Name = paramName
		,Description = paramDescription
	WHERE		`role`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_role_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `role`
	WHERE		`role`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_role_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`role`.`Id` AS `Id`,
		`role`.`Name` AS `Name`,
		`role`.`Description` AS `Description`
	FROM `role`
	WHERE
		COALESCE(role.`Id`,0) = COALESCE(paramId,role.`Id`,0)
		AND COALESCE(role.`Name`,'') = COALESCE(paramName,role.`Name`,'')
		AND COALESCE(role.`Description`,'') = COALESCE(paramDescription,role.`Description`,'');
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/9/2017
Description:	Creates the customer table and respective stored procedures

*/


USE cory2v;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `cory2v`.`customer`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_customer_Load`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_customer_LoadAll`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_customer_Add`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_customer_Update`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_customer_Delete`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_customer_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `cory2v`.`customer` (
Id INT AUTO_INCREMENT,
FirstName VARCHAR(255),
LastName VARCHAR(255),
Email VARCHAR(255),
Password VARCHAR(255),
CreateDate DATETIME,
CONSTRAINT pk_customer_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_customer_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`customer`.`Id` AS `Id`,
		`customer`.`FirstName` AS `FirstName`,
		`customer`.`LastName` AS `LastName`,
		`customer`.`Email` AS `Email`,
		`customer`.`Password` AS `Password`,
		`customer`.`CreateDate` AS `CreateDate`
	FROM `customer`
	WHERE 		`customer`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_customer_LoadAll`
()
BEGIN
	SELECT
		`customer`.`Id` AS `Id`,
		`customer`.`FirstName` AS `FirstName`,
		`customer`.`LastName` AS `LastName`,
		`customer`.`Email` AS `Email`,
		`customer`.`Password` AS `Password`,
		`customer`.`CreateDate` AS `CreateDate`
	FROM `customer`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_customer_Add`
(
	 IN paramFirstName VARCHAR(255),
	 IN paramLastName VARCHAR(255),
	 IN paramEmail VARCHAR(255),
	 IN paramPassword VARCHAR(255),
	 IN paramCreateDate DATETIME
)
BEGIN
	INSERT INTO `customer` (FirstName,LastName,Email,Password,CreateDate)
	VALUES (paramFirstName, paramLastName, paramEmail, paramPassword, paramCreateDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_customer_Update`
(
	IN paramId INT,
	IN paramFirstName VARCHAR(255),
	IN paramLastName VARCHAR(255),
	IN paramEmail VARCHAR(255),
	IN paramPassword VARCHAR(255),
	IN paramCreateDate DATETIME
)
BEGIN
	UPDATE `customer`
	SET FirstName = paramFirstName
		,LastName = paramLastName
		,Email = paramEmail
		,Password = paramPassword
		,CreateDate = paramCreateDate
	WHERE		`customer`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_customer_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `customer`
	WHERE		`customer`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_customer_Search`
(
	IN paramId INT,
	IN paramFirstName VARCHAR(255),
	IN paramLastName VARCHAR(255),
	IN paramEmail VARCHAR(255),
	IN paramPassword VARCHAR(255),
	IN paramCreateDate DATETIME
)
BEGIN
	SELECT
		`customer`.`Id` AS `Id`,
		`customer`.`FirstName` AS `FirstName`,
		`customer`.`LastName` AS `LastName`,
		`customer`.`Email` AS `Email`,
		`customer`.`Password` AS `Password`,
		`customer`.`CreateDate` AS `CreateDate`
	FROM `customer`
	WHERE
		COALESCE(customer.`Id`,0) = COALESCE(paramId,customer.`Id`,0)
		AND COALESCE(customer.`FirstName`,'') = COALESCE(paramFirstName,customer.`FirstName`,'')
		AND COALESCE(customer.`LastName`,'') = COALESCE(paramLastName,customer.`LastName`,'')
		AND COALESCE(customer.`Email`,'') = COALESCE(paramEmail,customer.`Email`,'')
		AND COALESCE(customer.`Password`,'') = COALESCE(paramPassword,customer.`Password`,'')
		AND COALESCE(CAST(customer.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(customer.`CreateDate` AS DATE), CAST(NOW() AS DATE));
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/15/2017
Description:	Creates the eventtype table and respective stored procedures

*/


USE cory2v;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `cory2v`.`eventtype`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_eventtype_Load`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_eventtype_LoadAll`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_eventtype_Add`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_eventtype_Update`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_eventtype_Delete`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_eventtype_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `cory2v`.`eventtype` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_eventtype_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_eventtype_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`eventtype`.`Id` AS `Id`,
		`eventtype`.`Name` AS `Name`,
		`eventtype`.`Description` AS `Description`
	FROM `eventtype`
	WHERE 		`eventtype`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_eventtype_LoadAll`
()
BEGIN
	SELECT
		`eventtype`.`Id` AS `Id`,
		`eventtype`.`Name` AS `Name`,
		`eventtype`.`Description` AS `Description`
	FROM `eventtype`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_eventtype_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `eventtype` (Name,Description)
	VALUES (paramName, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_eventtype_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `eventtype`
	SET Name = paramName
		,Description = paramDescription
	WHERE		`eventtype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_eventtype_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `eventtype`
	WHERE		`eventtype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_eventtype_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`eventtype`.`Id` AS `Id`,
		`eventtype`.`Name` AS `Name`,
		`eventtype`.`Description` AS `Description`
	FROM `eventtype`
	WHERE
		COALESCE(eventtype.`Id`,0) = COALESCE(paramId,eventtype.`Id`,0)
		AND COALESCE(eventtype.`Name`,'') = COALESCE(paramName,eventtype.`Name`,'')
		AND COALESCE(eventtype.`Description`,'') = COALESCE(paramDescription,eventtype.`Description`,'');
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/9/2017
Description:	Creates the securityuser table and respective stored procedures

*/


USE cory2v;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `cory2v`.`securityuser`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_securityuser_Load`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_securityuser_LoadAll`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_securityuser_Add`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_securityuser_Update`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_securityuser_Delete`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_securityuser_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `cory2v`.`securityuser` (
Id INT AUTO_INCREMENT,
Username VARCHAR(255),
Password VARCHAR(255),
Email VARCHAR(255),
RoleId INT,
CreateDate DATETIME,
CONSTRAINT pk_securityuser_Id PRIMARY KEY (Id),
CONSTRAINT fk_securityuser_RoleId_Role_Id FOREIGN KEY (RoleId) REFERENCES Role (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_securityuser_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`securityuser`.`Id` AS `Id`,
		`securityuser`.`Username` AS `Username`,
		`securityuser`.`Password` AS `Password`,
		`securityuser`.`Email` AS `Email`,
		`securityuser`.`RoleId` AS `RoleId`,
		`securityuser`.`CreateDate` AS `CreateDate`
	FROM `securityuser`
	WHERE 		`securityuser`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_securityuser_LoadAll`
()
BEGIN
	SELECT
		`securityuser`.`Id` AS `Id`,
		`securityuser`.`Username` AS `Username`,
		`securityuser`.`Password` AS `Password`,
		`securityuser`.`Email` AS `Email`,
		`securityuser`.`RoleId` AS `RoleId`,
		`securityuser`.`CreateDate` AS `CreateDate`
	FROM `securityuser`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_securityuser_Add`
(
	 IN paramUsername VARCHAR(255),
	 IN paramPassword VARCHAR(255),
	 IN paramEmail VARCHAR(255),
	 IN paramRoleId INT,
	 IN paramCreateDate DATETIME
)
BEGIN
	INSERT INTO `securityuser` (Username,Password,Email,RoleId,CreateDate)
	VALUES (paramUsername, paramPassword, paramEmail, paramRoleId, paramCreateDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_securityuser_Update`
(
	IN paramId INT,
	IN paramUsername VARCHAR(255),
	IN paramPassword VARCHAR(255),
	IN paramEmail VARCHAR(255),
	IN paramRoleId INT,
	IN paramCreateDate DATETIME
)
BEGIN
	UPDATE `securityuser`
	SET Username = paramUsername
		,Password = paramPassword
		,Email = paramEmail
		,RoleId = paramRoleId
		,CreateDate = paramCreateDate
	WHERE		`securityuser`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_securityuser_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `securityuser`
	WHERE		`securityuser`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_securityuser_Search`
(
	IN paramId INT,
	IN paramUsername VARCHAR(255),
	IN paramPassword VARCHAR(255),
	IN paramEmail VARCHAR(255),
	IN paramRoleId INT,
	IN paramCreateDate DATETIME
)
BEGIN
	SELECT
		`securityuser`.`Id` AS `Id`,
		`securityuser`.`Username` AS `Username`,
		`securityuser`.`Password` AS `Password`,
		`securityuser`.`Email` AS `Email`,
		`securityuser`.`RoleId` AS `RoleId`,
		`securityuser`.`CreateDate` AS `CreateDate`
	FROM `securityuser`
	WHERE
		COALESCE(securityuser.`Id`,0) = COALESCE(paramId,securityuser.`Id`,0)
		AND COALESCE(securityuser.`Username`,'') = COALESCE(paramUsername,securityuser.`Username`,'')
		AND COALESCE(securityuser.`Password`,'') = COALESCE(paramPassword,securityuser.`Password`,'')
		AND COALESCE(securityuser.`Email`,'') = COALESCE(paramEmail,securityuser.`Email`,'')
		AND COALESCE(securityuser.`RoleId`,0) = COALESCE(paramRoleId,securityuser.`RoleId`,0)
		AND COALESCE(CAST(securityuser.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(securityuser.`CreateDate` AS DATE), CAST(NOW() AS DATE));
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/22/2017
Description:	Creates the event table and respective stored procedures

*/


USE cory2v;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `cory2v`.`event`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_event_Load`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_event_LoadAll`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_event_Add`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_event_Update`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_event_Delete`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_event_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `cory2v`.`event` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
ImgUrl VARCHAR(1025),
StartDate DATETIME,
EndDate DATETIME,
Location VARCHAR(512),
EventTypeId INT,
TicketLink VARCHAR(1025),
CONSTRAINT pk_event_Id PRIMARY KEY (Id),
CONSTRAINT fk_event_EventTypeId_eventtype_Id FOREIGN KEY (EventTypeId) REFERENCES eventtype (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_event_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`event`.`Id` AS `Id`,
		`event`.`Name` AS `Name`,
		`event`.`Description` AS `Description`,
		`event`.`ImgUrl` AS `ImgUrl`,
		`event`.`StartDate` AS `StartDate`,
		`event`.`EndDate` AS `EndDate`,
		`event`.`Location` AS `Location`,
		`event`.`EventTypeId` AS `EventTypeId`,
		`event`.`TicketLink` AS `TicketLink`
	FROM `event`
	WHERE 		`event`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_event_LoadAll`
()
BEGIN
	SELECT
		`event`.`Id` AS `Id`,
		`event`.`Name` AS `Name`,
		`event`.`Description` AS `Description`,
		`event`.`ImgUrl` AS `ImgUrl`,
		`event`.`StartDate` AS `StartDate`,
		`event`.`EndDate` AS `EndDate`,
		`event`.`Location` AS `Location`,
		`event`.`EventTypeId` AS `EventTypeId`,
		`event`.`TicketLink` AS `TicketLink`
	FROM `event`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_event_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025),
	 IN paramImgUrl VARCHAR(1025),
	 IN paramStartDate DATETIME,
	 IN paramEndDate DATETIME,
	 IN paramLocation VARCHAR(512),
	 IN paramEventTypeId INT,
	 IN paramTicketLink VARCHAR(1025)
)
BEGIN
	INSERT INTO `event` (Name,Description,ImgUrl,StartDate,EndDate,Location,EventTypeId,TicketLink)
	VALUES (paramName, paramDescription, paramImgUrl, paramStartDate, paramEndDate, paramLocation, paramEventTypeId, paramTicketLink);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_event_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025),
	IN paramImgUrl VARCHAR(1025),
	IN paramStartDate DATETIME,
	IN paramEndDate DATETIME,
	IN paramLocation VARCHAR(512),
	IN paramEventTypeId INT,
	IN paramTicketLink VARCHAR(1025)
)
BEGIN
	UPDATE `event`
	SET Name = paramName
		,Description = paramDescription
		,ImgUrl = paramImgUrl
		,StartDate = paramStartDate
		,EndDate = paramEndDate
		,Location = paramLocation
		,EventTypeId = paramEventTypeId
		,TicketLink = paramTicketLink
	WHERE		`event`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_event_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `event`
	WHERE		`event`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_event_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025),
	IN paramImgUrl VARCHAR(1025),
	IN paramStartDate DATETIME,
	IN paramEndDate DATETIME,
	IN paramLocation VARCHAR(512),
	IN paramEventTypeId INT,
	IN paramTicketLink VARCHAR(1025)
)
BEGIN
	SELECT
		`event`.`Id` AS `Id`,
		`event`.`Name` AS `Name`,
		`event`.`Description` AS `Description`,
		`event`.`ImgUrl` AS `ImgUrl`,
		`event`.`StartDate` AS `StartDate`,
		`event`.`EndDate` AS `EndDate`,
		`event`.`Location` AS `Location`,
		`event`.`EventTypeId` AS `EventTypeId`,
		`event`.`TicketLink` AS `TicketLink`
	FROM `event`
	WHERE
		COALESCE(event.`Id`,0) = COALESCE(paramId,event.`Id`,0)
		AND COALESCE(event.`Name`,'') = COALESCE(paramName,event.`Name`,'')
		AND COALESCE(event.`Description`,'') = COALESCE(paramDescription,event.`Description`,'')
		AND COALESCE(event.`ImgUrl`,'') = COALESCE(paramImgUrl,event.`ImgUrl`,'')
		AND COALESCE(CAST(event.`StartDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramStartDate AS DATE),CAST(event.`StartDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(CAST(event.`EndDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramEndDate AS DATE),CAST(event.`EndDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(event.`Location`,'') = COALESCE(paramLocation,event.`Location`,'')
		AND COALESCE(event.`EventTypeId`,0) = COALESCE(paramEventTypeId,event.`EventTypeId`,0)
		AND COALESCE(event.`TicketLink`,'') = COALESCE(paramTicketLink,event.`TicketLink`,'');
END //
DELIMITER ;

/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/16/2017
Description:	Creates the eventcommentstatustype table and respective stored procedures

*/


USE cory2v;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `cory2v`.`eventcommentstatustype`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_eventcommentstatustype_Load`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_eventcommentstatustype_LoadAll`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_eventcommentstatustype_Add`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_eventcommentstatustype_Update`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_eventcommentstatustype_Delete`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_eventcommentstatustype_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `cory2v`.`eventcommentstatustype` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_eventcommentstatustype_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_eventcommentstatustype_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`eventcommentstatustype`.`Id` AS `Id`,
		`eventcommentstatustype`.`Name` AS `Name`,
		`eventcommentstatustype`.`Description` AS `Description`
	FROM `eventcommentstatustype`
	WHERE 		`eventcommentstatustype`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_eventcommentstatustype_LoadAll`
()
BEGIN
	SELECT
		`eventcommentstatustype`.`Id` AS `Id`,
		`eventcommentstatustype`.`Name` AS `Name`,
		`eventcommentstatustype`.`Description` AS `Description`
	FROM `eventcommentstatustype`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_eventcommentstatustype_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `eventcommentstatustype` (Name,Description)
	VALUES (paramName, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_eventcommentstatustype_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `eventcommentstatustype`
	SET Name = paramName
		,Description = paramDescription
	WHERE		`eventcommentstatustype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_eventcommentstatustype_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `eventcommentstatustype`
	WHERE		`eventcommentstatustype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_eventcommentstatustype_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`eventcommentstatustype`.`Id` AS `Id`,
		`eventcommentstatustype`.`Name` AS `Name`,
		`eventcommentstatustype`.`Description` AS `Description`
	FROM `eventcommentstatustype`
	WHERE
		COALESCE(eventcommentstatustype.`Id`,0) = COALESCE(paramId,eventcommentstatustype.`Id`,0)
		AND COALESCE(eventcommentstatustype.`Name`,'') = COALESCE(paramName,eventcommentstatustype.`Name`,'')
		AND COALESCE(eventcommentstatustype.`Description`,'') = COALESCE(paramDescription,eventcommentstatustype.`Description`,'');
END //
DELIMITER ;



/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/16/2017
Description:	Creates the eventcomment table and respective stored procedures

*/


USE cory2v;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `cory2v`.`eventcomment`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_eventcomment_Load`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_eventcomment_LoadAll`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_eventcomment_Add`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_eventcomment_Update`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_eventcomment_Delete`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_eventcomment_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `cory2v`.`eventcomment` (
Id INT AUTO_INCREMENT,
Comment VARCHAR(32768),
CustomerId INT,
EventCommentStatusTypeId INT,
EventId INT,
CreateDate DATETIME,
EditDate DATETIME,
CONSTRAINT pk_eventcomment_Id PRIMARY KEY (Id),
CONSTRAINT fk_eventcomment_CustomerId_securityuser_Id FOREIGN KEY (CustomerId) REFERENCES customer (Id),
CONSTRAINT fk_eventcomment_StatusTypeId_statustype_Id FOREIGN KEY (EventCommentStatusTypeId) REFERENCES eventcommentstatustype (Id),
CONSTRAINT fk_eventcomment_EventId_event_Id FOREIGN KEY (EventId) REFERENCES event (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_eventcomment_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`eventcomment`.`Id` AS `Id`,
		`eventcomment`.`Comment` AS `Comment`,
		`eventcomment`.`CustomerId` AS `CustomerId`,
		`eventcomment`.`EventCommentStatusTypeId` AS `EventCommentStatusTypeId`,
		`eventcomment`.`EventId` AS `EventId`,
		`eventcomment`.`CreateDate` AS `CreateDate`,
		`eventcomment`.`EditDate` AS `EditDate`
	FROM `eventcomment`
	WHERE 		`eventcomment`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_eventcomment_LoadAll`
()
BEGIN
	SELECT
		`eventcomment`.`Id` AS `Id`,
		`eventcomment`.`Comment` AS `Comment`,
		`eventcomment`.`CustomerId` AS `CustomerId`,
		`eventcomment`.`EventCommentStatusTypeId` AS `EventCommentStatusTypeId`,
		`eventcomment`.`EventId` AS `EventId`,
		`eventcomment`.`CreateDate` AS `CreateDate`,
		`eventcomment`.`EditDate` AS `EditDate`
	FROM `eventcomment`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_eventcomment_Add`
(
	 IN paramComment VARCHAR(32768),
	 IN paramCustomerId INT,
	 IN paramEventCommentStatusTypeId INT,
	 IN paramEventId INT,
	 IN paramCreateDate DATETIME,
	 IN paramEditDate DATETIME
)
BEGIN
	INSERT INTO `eventcomment` (Comment,CustomerId,EventCommentStatusTypeId,EventId,CreateDate,EditDate)
	VALUES (paramComment, paramCustomerId, paramEventCommentStatusTypeId, paramEventId, paramCreateDate, paramEditDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_eventcomment_Update`
(
	IN paramId INT,
	IN paramComment VARCHAR(32768),
	IN paramCustomerId INT,
	IN paramEventCommentStatusTypeId INT,
	IN paramEventId INT,
	IN paramCreateDate DATETIME,
	IN paramEditDate DATETIME
)
BEGIN
	UPDATE `eventcomment`
	SET Comment = paramComment
		,CustomerId = paramCustomerId
		,EventCommentStatusTypeId = paramEventCommentStatusTypeId
		,EventId = paramEventId
		,CreateDate = paramCreateDate
		,EditDate = paramEditDate
	WHERE		`eventcomment`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_eventcomment_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `eventcomment`
	WHERE		`eventcomment`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_eventcomment_Search`
(
	IN paramId INT,
	IN paramComment VARCHAR(32768),
	IN paramCustomerId INT,
	IN paramEventCommentStatusTypeId INT,
	IN paramEventId INT,
	IN paramCreateDate DATETIME,
	IN paramEditDate DATETIME
)
BEGIN
	SELECT
		`eventcomment`.`Id` AS `Id`,
		`eventcomment`.`Comment` AS `Comment`,
		`eventcomment`.`CustomerId` AS `CustomerId`,
		`eventcomment`.`EventCommentStatusTypeId` AS `EventCommentStatusTypeId`,
		`eventcomment`.`EventId` AS `EventId`,
		`eventcomment`.`CreateDate` AS `CreateDate`,
		`eventcomment`.`EditDate` AS `EditDate`
	FROM `eventcomment`
	WHERE
		COALESCE(eventcomment.`Id`,0) = COALESCE(paramId,eventcomment.`Id`,0)
		AND COALESCE(eventcomment.`Comment`,'') = COALESCE(paramComment,eventcomment.`Comment`,'')
		AND COALESCE(eventcomment.`CustomerId`,0) = COALESCE(paramCustomerId,eventcomment.`CustomerId`,0)
		AND COALESCE(eventcomment.`EventCommentStatusTypeId`,0) = COALESCE(paramEventCommentStatusTypeId,eventcomment.`EventCommentStatusTypeId`,0)
		AND COALESCE(eventcomment.`EventId`,0) = COALESCE(paramEventId,eventcomment.`EventId`,0)
		AND COALESCE(CAST(eventcomment.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(eventcomment.`CreateDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(CAST(eventcomment.`EditDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramEditDate AS DATE),CAST(eventcomment.`EditDate` AS DATE), CAST(NOW() AS DATE));
END //
DELIMITER ;

/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/23/2017
Description:	Creates the image table and respective stored procedures

*/


USE cory2v;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `cory2v`.`image`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_image_Load`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_image_LoadAll`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_image_Add`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_image_Update`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_image_Delete`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_image_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `cory2v`.`image` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
ImgUrl VARCHAR(1025),
EventId INT,
Views INT,
IsFeaturedImage INT,
CONSTRAINT pk_image_Id PRIMARY KEY (Id),
CONSTRAINT fk_image_EventId_event_Id FOREIGN KEY (EventId) REFERENCES event (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_image_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`image`.`Id` AS `Id`,
		`image`.`Name` AS `Name`,
		`image`.`Description` AS `Description`,
		`image`.`ImgUrl` AS `ImgUrl`,
		`image`.`EventId` AS `EventId`,
		`image`.`Views` AS `Views`,
		`image`.`IsFeaturedImage` AS `IsFeaturedImage`
	FROM `image`
	WHERE 		`image`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_image_LoadAll`
()
BEGIN
	SELECT
		`image`.`Id` AS `Id`,
		`image`.`Name` AS `Name`,
		`image`.`Description` AS `Description`,
		`image`.`ImgUrl` AS `ImgUrl`,
		`image`.`EventId` AS `EventId`,
		`image`.`Views` AS `Views`,
		`image`.`IsFeaturedImage` AS `IsFeaturedImage`
	FROM `image`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_image_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025),
	 IN paramImgUrl VARCHAR(1025),
	 IN paramEventId INT,
	 IN paramViews INT,
	 IN paramIsFeaturedImage INT
)
BEGIN
	INSERT INTO `image` (Name,Description,ImgUrl,EventId,Views,IsFeaturedImage)
	VALUES (paramName, paramDescription, paramImgUrl, paramEventId, paramViews, paramIsFeaturedImage);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_image_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025),
	IN paramImgUrl VARCHAR(1025),
	IN paramEventId INT,
	IN paramViews INT,
	IN paramIsFeaturedImage INT
)
BEGIN
	UPDATE `image`
	SET Name = paramName
		,Description = paramDescription
		,ImgUrl = paramImgUrl
		,EventId = paramEventId
		,Views = paramViews
		,IsFeaturedImage = paramIsFeaturedImage
	WHERE		`image`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_image_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `image`
	WHERE		`image`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_image_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025),
	IN paramImgUrl VARCHAR(1025),
	IN paramEventId INT,
	IN paramViews INT,
	IN paramIsFeaturedImage INT
)
BEGIN
	SELECT
		`image`.`Id` AS `Id`,
		`image`.`Name` AS `Name`,
		`image`.`Description` AS `Description`,
		`image`.`ImgUrl` AS `ImgUrl`,
		`image`.`EventId` AS `EventId`,
		`image`.`Views` AS `Views`,
		`image`.`IsFeaturedImage` AS `IsFeaturedImage`
	FROM `image`
	WHERE
		COALESCE(image.`Id`,0) = COALESCE(paramId,image.`Id`,0)
		AND COALESCE(image.`Name`,'') = COALESCE(paramName,image.`Name`,'')
		AND COALESCE(image.`Description`,'') = COALESCE(paramDescription,image.`Description`,'')
		AND COALESCE(image.`ImgUrl`,'') = COALESCE(paramImgUrl,image.`ImgUrl`,'')
		AND COALESCE(image.`EventId`,0) = COALESCE(paramEventId,image.`EventId`,0)
		AND COALESCE(image.`Views`,0) = COALESCE(paramViews,image.`Views`,0)
		AND COALESCE(image.`IsFeaturedImage`,0) = COALESCE(paramIsFeaturedImage,image.`IsFeaturedImage`,0);
END //
DELIMITER ;




/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/16/2017
Description:	Creates the imagecommentstatustype table and respective stored procedures

*/


USE cory2v;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `cory2v`.`imagecommentstatustype`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_imagecommentstatustype_Load`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_imagecommentstatustype_LoadAll`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_imagecommentstatustype_Add`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_imagecommentstatustype_Update`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_imagecommentstatustype_Delete`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_imagecommentstatustype_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `cory2v`.`imagecommentstatustype` (
Id INT AUTO_INCREMENT,
Name VARCHAR(255),
Description VARCHAR(1025),
CONSTRAINT pk_imagecommentstatustype_Id PRIMARY KEY (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_imagecommentstatustype_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`imagecommentstatustype`.`Id` AS `Id`,
		`imagecommentstatustype`.`Name` AS `Name`,
		`imagecommentstatustype`.`Description` AS `Description`
	FROM `imagecommentstatustype`
	WHERE 		`imagecommentstatustype`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_imagecommentstatustype_LoadAll`
()
BEGIN
	SELECT
		`imagecommentstatustype`.`Id` AS `Id`,
		`imagecommentstatustype`.`Name` AS `Name`,
		`imagecommentstatustype`.`Description` AS `Description`
	FROM `imagecommentstatustype`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_imagecommentstatustype_Add`
(
	 IN paramName VARCHAR(255),
	 IN paramDescription VARCHAR(1025)
)
BEGIN
	INSERT INTO `imagecommentstatustype` (Name,Description)
	VALUES (paramName, paramDescription);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_imagecommentstatustype_Update`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	UPDATE `imagecommentstatustype`
	SET Name = paramName
		,Description = paramDescription
	WHERE		`imagecommentstatustype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_imagecommentstatustype_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `imagecommentstatustype`
	WHERE		`imagecommentstatustype`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_imagecommentstatustype_Search`
(
	IN paramId INT,
	IN paramName VARCHAR(255),
	IN paramDescription VARCHAR(1025)
)
BEGIN
	SELECT
		`imagecommentstatustype`.`Id` AS `Id`,
		`imagecommentstatustype`.`Name` AS `Name`,
		`imagecommentstatustype`.`Description` AS `Description`
	FROM `imagecommentstatustype`
	WHERE
		COALESCE(imagecommentstatustype.`Id`,0) = COALESCE(paramId,imagecommentstatustype.`Id`,0)
		AND COALESCE(imagecommentstatustype.`Name`,'') = COALESCE(paramName,imagecommentstatustype.`Name`,'')
		AND COALESCE(imagecommentstatustype.`Description`,'') = COALESCE(paramDescription,imagecommentstatustype.`Description`,'');
END //
DELIMITER ;


/*
Author:			This code was generated by DALGen version 1.1.0.0 available at https://github.com/H0r53/DALGen
Date:			12/16/2017
Description:	Creates the imagecomment table and respective stored procedures

*/


USE cory2v;



-- ------------------------------------------------------------
-- Drop existing objects
-- ------------------------------------------------------------

DROP TABLE IF EXISTS `cory2v`.`imagecomment`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_imagecomment_Load`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_imagecomment_LoadAll`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_imagecomment_Add`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_imagecomment_Update`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_imagecomment_Delete`;
DROP PROCEDURE IF EXISTS `cory2v`.`usp_imagecomment_Search`;


-- ------------------------------------------------------------
-- Create table
-- ------------------------------------------------------------



CREATE TABLE `cory2v`.`imagecomment` (
Id INT AUTO_INCREMENT,
Comment VARCHAR(32768),
CustomerId INT,
ImageCommentStatusTypeId INT,
ImageId INT,
CreateDate DATETIME,
EditDate DATETIME,
CONSTRAINT pk_imagecomment_Id PRIMARY KEY (Id),
CONSTRAINT fk_imagecomment_CustomerId_customer_Id FOREIGN KEY (CustomerId) REFERENCES customer (Id),
CONSTRAINT fk_imagecomment_StatusTypeId_statustype_Id FOREIGN KEY (ImageCommentStatusTypeId) REFERENCES imagecommentstatustype (Id),
CONSTRAINT fk_imagecomment_ImageId_image_Id FOREIGN KEY (ImageId) REFERENCES image (Id)
);


-- ------------------------------------------------------------
-- Create default SCRUD sprocs for this table
-- ------------------------------------------------------------


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_imagecomment_Load`
(
	 IN paramId INT
)
BEGIN
	SELECT
		`imagecomment`.`Id` AS `Id`,
		`imagecomment`.`Comment` AS `Comment`,
		`imagecomment`.`CustomerId` AS `CustomerId`,
		`imagecomment`.`ImageCommentStatusTypeId` AS `ImageCommentStatusTypeId`,
		`imagecomment`.`ImageId` AS `ImageId`,
		`imagecomment`.`CreateDate` AS `CreateDate`,
		`imagecomment`.`EditDate` AS `EditDate`
	FROM `imagecomment`
	WHERE 		`imagecomment`.`Id` = paramId;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_imagecomment_LoadAll`
()
BEGIN
	SELECT
		`imagecomment`.`Id` AS `Id`,
		`imagecomment`.`Comment` AS `Comment`,
		`imagecomment`.`CustomerId` AS `CustomerId`,
		`imagecomment`.`ImageCommentStatusTypeId` AS `ImageCommentStatusTypeId`,
		`imagecomment`.`ImageId` AS `ImageId`,
		`imagecomment`.`CreateDate` AS `CreateDate`,
		`imagecomment`.`EditDate` AS `EditDate`
	FROM `imagecomment`;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_imagecomment_Add`
(
	 IN paramComment VARCHAR(32768),
	 IN paramCustomerId INT,
	 IN paramImageCommentStatusTypeId INT,
	 IN paramImageId INT,
	 IN paramCreateDate DATETIME,
	 IN paramEditDate DATETIME
)
BEGIN
	INSERT INTO `imagecomment` (Comment,CustomerId,ImageCommentStatusTypeId,ImageId,CreateDate,EditDate)
	VALUES (paramComment, paramCustomerId, paramImageCommentStatusTypeId, paramImageId, paramCreateDate, paramEditDate);
	-- Return last inserted ID as result
	SELECT LAST_INSERT_ID() as id;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_imagecomment_Update`
(
	IN paramId INT,
	IN paramComment VARCHAR(32768),
	IN paramCustomerId INT,
	IN paramImageCommentStatusTypeId INT,
	IN paramImageId INT,
	IN paramCreateDate DATETIME,
	IN paramEditDate DATETIME
)
BEGIN
	UPDATE `imagecomment`
	SET Comment = paramComment
		,CustomerId = paramCustomerId
		,ImageCommentStatusTypeId = paramImageCommentStatusTypeId
		,ImageId = paramImageId
		,CreateDate = paramCreateDate
		,EditDate = paramEditDate
	WHERE		`imagecomment`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_imagecomment_Delete`
(
	IN paramId INT
)
BEGIN
	DELETE FROM `imagecomment`
	WHERE		`imagecomment`.`Id` = paramId;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_imagecomment_Search`
(
	IN paramId INT,
	IN paramComment VARCHAR(32768),
	IN paramCustomerId INT,
	IN paramImageCommentStatusTypeId INT,
	IN paramImageId INT,
	IN paramCreateDate DATETIME,
	IN paramEditDate DATETIME
)
BEGIN
	SELECT
		`imagecomment`.`Id` AS `Id`,
		`imagecomment`.`Comment` AS `Comment`,
		`imagecomment`.`CustomerId` AS `CustomerId`,
		`imagecomment`.`ImageCommentStatusTypeId` AS `ImageCommentStatusTypeId`,
		`imagecomment`.`ImageId` AS `ImageId`,
		`imagecomment`.`CreateDate` AS `CreateDate`,
		`imagecomment`.`EditDate` AS `EditDate`
	FROM `imagecomment`
	WHERE
		COALESCE(imagecomment.`Id`,0) = COALESCE(paramId,imagecomment.`Id`,0)
		AND COALESCE(imagecomment.`Comment`,'') = COALESCE(paramComment,imagecomment.`Comment`,'')
		AND COALESCE(imagecomment.`CustomerId`,0) = COALESCE(paramCustomerId,imagecomment.`CustomerId`,0)
		AND COALESCE(imagecomment.`ImageCommentStatusTypeId`,0) = COALESCE(paramImageCommentStatusTypeId,imagecomment.`ImageCommentStatusTypeId`,0)
		AND COALESCE(imagecomment.`ImageId`,0) = COALESCE(paramImageId,imagecomment.`ImageId`,0)
		AND COALESCE(CAST(imagecomment.`CreateDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramCreateDate AS DATE),CAST(imagecomment.`CreateDate` AS DATE), CAST(NOW() AS DATE))
		AND COALESCE(CAST(imagecomment.`EditDate` AS DATE), CAST(NOW() AS DATE)) = COALESCE(CAST(paramEditDate AS DATE),CAST(imagecomment.`EditDate` AS DATE), CAST(NOW() AS DATE));
END //
DELIMITER ;

use cory2v;
DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_customer_Lookup`
(
	IN paramEmail VARCHAR(255)
)
BEGIN
  SELECT
	  `customer`.`Id` AS `Id`,
		`customer`.`FirstName` AS `FirstName`,
		`customer`.`LastName` AS `LastName`,
		`customer`.`Email` AS `Email`,
		`customer`.`Password` AS `Password`,
		`customer`.`CreateDate` AS `CreateDate`
	FROM `customer`
	WHERE 		`customer`.`Email` = paramEmail;
END //
DELIMITER ;

use cory2v;
DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_eventcomment_LoadByEventId`
(
	 IN paramEventId INT
)
BEGIN
	SELECT
		`eventcomment`.`Id` AS `Id`,
		`eventcomment`.`Comment` AS `Comment`,
		`eventcomment`.`CustomerId` AS `CustomerId`,
		`eventcomment`.`EventCommentStatusTypeId` AS `EventCommentStatusTypeId`,
		`eventcomment`.`EventId` AS `EventId`,
		`eventcomment`.`CreateDate` AS `CreateDate`,
		`eventcomment`.`EditDate` AS `EditDate`
	FROM `eventcomment`
	WHERE 		`eventcomment`.`EventId` = paramEventId;
END //
DELIMITER ;

use cory2v;
DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_imagecomment_LoadByImageId`
(
	 IN paramImageId INT
)
BEGIN
	SELECT
		`imagecomment`.`Id` AS `Id`,
		`imagecomment`.`Comment` AS `Comment`,
		`imagecomment`.`CustomerId` AS `CustomerId`,
		`imagecomment`.`ImageCommentStatusTypeId` AS `ImageCommentStatusTypeId`,
		`imagecomment`.`ImageId` AS `ImageId`,
		`imagecomment`.`CreateDate` AS `CreateDate`,
		`imagecomment`.`EditDate` AS `EditDate`
	FROM `imagecomment`
	WHERE 		`imagecomment`.`ImageId` = paramImageId;
END //
DELIMITER ;

use cory2v;
DELIMITER //
CREATE PROCEDURE `cory2v`.`usp_securityuser_Lookup`
(
	IN paramUsername VARCHAR(255)
)
BEGIN
  SELECT
			`securityuser`.`Id` AS `Id`,
		`securityuser`.`Username` AS `Username`,
		`securityuser`.`Password` AS `Password`,
		`securityuser`.`Email` AS `Email`,
		`securityuser`.`RoleId` AS `RoleId`,
		`securityuser`.`CreateDate` AS `CreateDate`
	FROM `securityuser`
	WHERE 		`securityuser`.`Username` = paramUsername;
END //
DELIMITER ;



use cory2v;
INSERT INTO `role` (`Id`, `Name`, `Description`) VALUES ('1', 'Administrator', 'Administrator Role.');
use cory2v;
INSERT INTO `imagecommentstatustype` (`Id`, `Name`, `Description`) VALUES ('1', 'Active', 'Comment will appear on image post.');
use cory2v;
INSERT INTO `eventtype` (`Id`, `Name`, `Description`) VALUES ('1', 'General', 'General Event.');
use cory2v;
INSERT INTO `eventcommentstatustype` (`Id`, `Name`, `Description`) VALUES ('1', 'Active', 'Comment will appear on event page.');
